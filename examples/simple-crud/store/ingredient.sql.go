// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: ingredient.sql

package store

import (
	"context"

	"simple-crud/store/types"
)

const createIngredient = `-- name: CreateIngredient :one
INSERT INTO ingredient (id, name, description) VALUES (?, ?, ?) RETURNING id, created_at, name, description, default_unit, category, available_all_year, available_jan, available_feb, available_mar, available_apr, available_may, available_jun, available_jul, available_aug, available_sep, available_oct, available_nov, available_dec
`

type CreateIngredientParams struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateIngredient(ctx context.Context, arg CreateIngredientParams) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, createIngredient, arg.ID, arg.Name, arg.Description)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Description,
		&i.DefaultUnit,
		&i.Category,
		&i.AvailableAllYear,
		&i.AvailableJan,
		&i.AvailableFeb,
		&i.AvailableMar,
		&i.AvailableApr,
		&i.AvailableMay,
		&i.AvailableJun,
		&i.AvailableJul,
		&i.AvailableAug,
		&i.AvailableSep,
		&i.AvailableOct,
		&i.AvailableNov,
		&i.AvailableDec,
	)
	return i, err
}

const getIngredient = `-- name: GetIngredient :one
SELECT id, created_at, name, description, default_unit, category, available_all_year, available_jan, available_feb, available_mar, available_apr, available_may, available_jun, available_jul, available_aug, available_sep, available_oct, available_nov, available_dec FROM ingredient WHERE id = ?
`

func (q *Queries) GetIngredient(ctx context.Context, id string) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, getIngredient, id)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Description,
		&i.DefaultUnit,
		&i.Category,
		&i.AvailableAllYear,
		&i.AvailableJan,
		&i.AvailableFeb,
		&i.AvailableMar,
		&i.AvailableApr,
		&i.AvailableMay,
		&i.AvailableJun,
		&i.AvailableJul,
		&i.AvailableAug,
		&i.AvailableSep,
		&i.AvailableOct,
		&i.AvailableNov,
		&i.AvailableDec,
	)
	return i, err
}

const getIngredients = `-- name: GetIngredients :many
SELECT id, created_at, name, description, default_unit, category, available_all_year, available_jan, available_feb, available_mar, available_apr, available_may, available_jun, available_jul, available_aug, available_sep, available_oct, available_nov, available_dec FROM ingredient
`

func (q *Queries) GetIngredients(ctx context.Context) ([]Ingredient, error) {
	rows, err := q.db.QueryContext(ctx, getIngredients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ingredient
	for rows.Next() {
		var i Ingredient
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Name,
			&i.Description,
			&i.DefaultUnit,
			&i.Category,
			&i.AvailableAllYear,
			&i.AvailableJan,
			&i.AvailableFeb,
			&i.AvailableMar,
			&i.AvailableApr,
			&i.AvailableMay,
			&i.AvailableJun,
			&i.AvailableJul,
			&i.AvailableAug,
			&i.AvailableSep,
			&i.AvailableOct,
			&i.AvailableNov,
			&i.AvailableDec,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIngredientsOfRecipe = `-- name: GetIngredientsOfRecipe :many
SELECT quantity, unit, ingredient.id, ingredient.created_at, ingredient.name, ingredient.description, ingredient.default_unit, ingredient.category, ingredient.available_all_year, ingredient.available_jan, ingredient.available_feb, ingredient.available_mar, ingredient.available_apr, ingredient.available_may, ingredient.available_jun, ingredient.available_jul, ingredient.available_aug, ingredient.available_sep, ingredient.available_oct, ingredient.available_nov, ingredient.available_dec FROM ingredient
JOIN dosing ON ingredient.id = dosing.ingredient_id
WHERE dosing.recipe_id = ?
`

type GetIngredientsOfRecipeRow struct {
	Quantity   int64      `json:"quantity" validate:"required,gt=0"`
	Unit       types.Unit `json:"unit" validate:"required"`
	Ingredient Ingredient `json:"ingredient"`
}

func (q *Queries) GetIngredientsOfRecipe(ctx context.Context, recipeID string) ([]GetIngredientsOfRecipeRow, error) {
	rows, err := q.db.QueryContext(ctx, getIngredientsOfRecipe, recipeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetIngredientsOfRecipeRow
	for rows.Next() {
		var i GetIngredientsOfRecipeRow
		if err := rows.Scan(
			&i.Quantity,
			&i.Unit,
			&i.Ingredient.ID,
			&i.Ingredient.CreatedAt,
			&i.Ingredient.Name,
			&i.Ingredient.Description,
			&i.Ingredient.DefaultUnit,
			&i.Ingredient.Category,
			&i.Ingredient.AvailableAllYear,
			&i.Ingredient.AvailableJan,
			&i.Ingredient.AvailableFeb,
			&i.Ingredient.AvailableMar,
			&i.Ingredient.AvailableApr,
			&i.Ingredient.AvailableMay,
			&i.Ingredient.AvailableJun,
			&i.Ingredient.AvailableJul,
			&i.Ingredient.AvailableAug,
			&i.Ingredient.AvailableSep,
			&i.Ingredient.AvailableOct,
			&i.Ingredient.AvailableNov,
			&i.Ingredient.AvailableDec,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
