// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: ingredient.sql

package store

import (
	"context"
)

const createIngredient = `-- name: CreateIngredient :one
INSERT INTO ingredient (id, name, description) VALUES (?, ?, ?) RETURNING id, created_at, name, description
`

type CreateIngredientParams struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateIngredient(ctx context.Context, arg CreateIngredientParams) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, createIngredient, arg.ID, arg.Name, arg.Description)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const getIngredient = `-- name: GetIngredient :one
SELECT id, created_at, name, description FROM ingredient WHERE id = ?
`

func (q *Queries) GetIngredient(ctx context.Context, id string) (Ingredient, error) {
	row := q.db.QueryRowContext(ctx, getIngredient, id)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const getIngredients = `-- name: GetIngredients :many
SELECT id, created_at, name, description FROM ingredient
`

func (q *Queries) GetIngredients(ctx context.Context) ([]Ingredient, error) {
	rows, err := q.db.QueryContext(ctx, getIngredients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ingredient
	for rows.Next() {
		var i Ingredient
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIngredientsOfRecipe = `-- name: GetIngredientsOfRecipe :many
SELECT quantity, unit, ingredient.id, ingredient.created_at, ingredient.name, ingredient.description FROM ingredient
JOIN dosing ON ingredient.id = dosing.ingredient_id
WHERE dosing.recipe_id = ?
`

type GetIngredientsOfRecipeRow struct {
	Quantity   int64      `json:"quantity" validate:"required,gt=0"`
	Unit       string     `json:"unit" validate:"required"`
	Ingredient Ingredient `json:"ingredient"`
}

func (q *Queries) GetIngredientsOfRecipe(ctx context.Context, recipeID string) ([]GetIngredientsOfRecipeRow, error) {
	rows, err := q.db.QueryContext(ctx, getIngredientsOfRecipe, recipeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetIngredientsOfRecipeRow
	for rows.Next() {
		var i GetIngredientsOfRecipeRow
		if err := rows.Scan(
			&i.Quantity,
			&i.Unit,
			&i.Ingredient.ID,
			&i.Ingredient.CreatedAt,
			&i.Ingredient.Name,
			&i.Ingredient.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
